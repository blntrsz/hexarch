import { createRoute, z } from "@hono/zod-openapi";

{{#if types}}
{{#each types}}
{{{this}}}
{{/each}}
{{/if}}

{{#each schemas}}
const {{@key}}{{#if (lookup ../emittedType @key)}}: z.ZodType<{{@key}}>{{/if}} = {{{this}}};
{{/each}}

{{#ifNotEmptyObj schemas}}
export const schemas = {
{{#each schemas}}
	{{@key}},
{{/each}}
};

{{/ifNotEmptyObj}}
{{#each endpointsGroups}}
export const {{@key}}Endpoints = {
{{#each this.endpoints}}
  {{alias}}: createRoute({
    path: "{{parsePath path}}",
    method: "{{method}}",
    description: "{{description}}",
    tags: ["{{getTag path }}"],
    request: {
      query: z.object({
      {{#each parameters}}
        {{#if (eq type 'Query')}}
        "{{name}}": {{coerce schema}},
        {{/if}}
      {{/each}}
      }),
      params: z.object({
      {{#each parameters}}
        {{#if (eq type 'Path')}}
        "{{name}}": {{schema}},
        {{/if}}
      {{/each}}
      }),
      {{#each parameters}}
      {{#if (eq type 'Body')}}
      body: {
        content: {
          "application/json": {
            schema: {{schema}},
          }
        }
      },
      {{/if}}
      {{/each}}
    },
    responses: {
    {{#each this.responses}}
      {{statusCode}}: {
        description: "{{description}}",
        {{#if (isNotVoidSchema schema)}}
        content: {
          "application/json": {
            schema: {{schema}},
          }
        }
        {{/if}}
      },
    {{/each}}
    },
  }),
{{/each}}
  };
{{/each}}
